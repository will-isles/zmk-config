/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        HMR: HMR {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41 36 37 38>;
            hold-trigger-on-release;
        };

        HML: HML {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "tap-preferred";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 41>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp ESCAPE  &kp Q  &kp W  &kp E  &kp R  &kp T        &kp Y           &kp U  &kp I        &kp O        &kp P            &kp BSPC
&kp TAB     &kp A  &kp S  &kp D  &kp F  &kp G        &kp H           &kp J  &HMR RGUI K  &HMR RALT L  &HMR RCTRL SEMI  &kp SQT
&kp LCTRL   &kp Z  &kp X  &kp C  &kp V  &kp B        &kp N           &kp M  &kp COMMA    &kp DOT      &kp FSLH         &kp DEL
                          &kp B  &mo 1  &kp SPACE    &kp LEFT_SHIFT  &mo 2  &kp ENTER
            >;
        };

        layer_1 {
            bindings = <
&kp ASTERISK  &kp MINUS      &mt AMPERSAND N7          &mt ASTERISK N8       &mt LEFT_PARENTHESIS N9  &HMR RIGHT_PARENTHESIS PLUS    &kp GRAVE  &trans             &kp UP_ARROW     &trans     &kp LEFT_BRACE    &kp RIGHT_BRACE
&kp PLUS      &kp BACKSPACE  &mt DOLLAR NUMBER_4       &mt PERCENT N5        &mt CARET NUMBER_6       &kp ENTER                      &trans     &kp LEFT           &kp DOWN         &kp RIGHT  &kp LEFT_BRACKET  &kp RIGHT_BRACKET
&trans        &kp N0         &mt EXCLAMATION NUMBER_1  &mt AT_SIGN NUMBER_2  &mt HASH NUMBER_3        &kp PERIOD                     &kp INS    &kp DEL            &kp HOME         &kp END    &kp PG_UP         &kp PG_DN
                                                       &kp TILDE             &kp SPACE                &kp LEFT_SHIFT                 &kp SPACE  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP
            >;
        };

        layer_2 {
            bindings = <
&kp F1  &kp F2  &kp F3  &kp F4  &kp F5  &kp F6            &kp F7        &kp F8        &kp F9        &kp F10       &kp F11       &kp F12
&trans  &trans  &trans  &trans  &trans  &trans            &trans        &trans        &trans        &trans        &trans        &trans
&trans  &trans  &trans  &trans  &trans  &trans            &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_CLR
                        &trans  &trans  &kp LEFT_SHIFT    &kp SPACE     &trans        &trans
            >;
        };

        layer_3 {
            bindings = <
&lt 0 ESCAPE   &kp Q  &kp W  &kp E      &kp R  &kp T             &kp Y      &kp U      &kp I        &kp O        &kp P            &kp BSPC
&kp DEL        &kp A  &kp S  &kp D      &kp F  &kp G             &kp H      &kp J      &HMR RGUI K  &HMR RALT L  &HMR RCTRL SEMI  &kp SQT
&kp BACKSLASH  &kp Z  &kp X  &kp C      &kp V  &kp B             &kp N      &kp M      &kp COMMA    &kp DOT      &kp FSLH         &kp ENTER
                             &kp EQUAL  &mo 1  &kp LEFT_SHIFT    &kp SPACE  &lt 2 TAB  &kp ENTER
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        gaming {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
